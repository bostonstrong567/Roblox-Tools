-- Explorer Dex Module
local ExplorerDex = {}
ExplorerDex.nodes = {}  -- Table to store references to all explorer nodes
ExplorerDex.debugMode = false  -- Enable/Disable debug logging
ExplorerDex.events = {}  -- Table for custom events to manage object hierarchy

-- Debugging function
local function debugPrint(message)
    if ExplorerDex.debugMode then
        print("[ExplorerDex Debug]: " .. message)
    end
end

-- Utility function: checks if the given object is a valid Instance
local function isValidInstance(object)
    return object and typeof(object) == "Instance"
end

-- Event system for adding custom listeners
function ExplorerDex.createEvent(eventName)
    ExplorerDex.events[eventName] = ExplorerDex.events[eventName] or Instance.new("BindableEvent")
    return ExplorerDex.events[eventName]
end

function ExplorerDex.fireEvent(eventName, ...)
    if ExplorerDex.events[eventName] then
        ExplorerDex.events[eventName]:Fire(...)
    end
end

function ExplorerDex.listenEvent(eventName, callback)
    if not ExplorerDex.events[eventName] then
        ExplorerDex.createEvent(eventName)
    end
    return ExplorerDex.events[eventName].Event:Connect(callback)
end

-- Function to add an object to the Explorer
function ExplorerDex.addObject(objectRoot)
    if not isValidInstance(objectRoot) then
        debugPrint("Attempted to add an invalid object.")
        return
    end
    if ExplorerDex.nodes[objectRoot] then
        debugPrint("Object already exists in Explorer.")
        return
    end

    -- Add the object to the nodes table
    ExplorerDex.nodes[objectRoot] = {
        Obj = objectRoot,
        Parent = objectRoot.Parent,
        Children = {},
        Expanded = false  -- Start collapsed
    }
    debugPrint("Added object: " .. objectRoot:GetFullName())

    -- Add all descendants recursively
    for _, descendant in ipairs(objectRoot:GetDescendants()) do
        ExplorerDex.addObject(descendant)
    end

    -- Fire an event that an object was added
    ExplorerDex.fireEvent("ObjectAdded", objectRoot)
end

-- Function to remove an object from the Explorer
function ExplorerDex.removeObject(objectRoot)
    if not isValidInstance(objectRoot) then
        debugPrint("Attempted to remove an invalid object.")
        return
    end
    if not ExplorerDex.nodes[objectRoot] then
        debugPrint("Object does not exist in Explorer.")
        return
    end

    -- Remove descendants first
    for _, descendant in ipairs(objectRoot:GetDescendants()) do
        ExplorerDex.removeObject(descendant)
    end

    -- Remove the root node
    ExplorerDex.nodes[objectRoot] = nil
    debugPrint("Removed object: " .. objectRoot:GetFullName())

    -- Fire an event that an object was removed
    ExplorerDex.fireEvent("ObjectRemoved", objectRoot)
end

-- Function to move an object to a new parent
function ExplorerDex.moveObject(objectRoot, newParent)
    if not isValidInstance(objectRoot) or not isValidInstance(newParent) then
        debugPrint("Invalid move: object or new parent is invalid.")
        return
    end

    -- Ensure both object and parent are in the Explorer
    ExplorerDex.addObject(objectRoot)
    ExplorerDex.addObject(newParent)

    -- Update the node's parent
    ExplorerDex.nodes[objectRoot].Parent = newParent
    objectRoot.Parent = newParent

    debugPrint("Moved object: " .. objectRoot:GetFullName() .. " to new parent: " .. newParent:GetFullName())
    
    -- Fire an event that an object was moved
    ExplorerDex.fireEvent("ObjectMoved", objectRoot, newParent)
end

-- Function to toggle expansion of an object (to show/hide children)
function ExplorerDex.toggleExpand(objectRoot)
    if not isValidInstance(objectRoot) or not ExplorerDex.nodes[objectRoot] then
        debugPrint("Attempted to toggle expand on an invalid object.")
        return
    end

    -- Toggle the expanded state
    ExplorerDex.nodes[objectRoot].Expanded = not ExplorerDex.nodes[objectRoot].Expanded
    debugPrint("Toggled expansion for: " .. objectRoot:GetFullName())

    -- Fire an event when an object is toggled
    ExplorerDex.fireEvent("ObjectToggled", objectRoot, ExplorerDex.nodes[objectRoot].Expanded)
end

-- Function to get all nodes (useful for UI or external systems)
function ExplorerDex.getNodes()
    return ExplorerDex.nodes
end

-- Function to enable or disable debug mode
function ExplorerDex.setDebugMode(state)
    ExplorerDex.debugMode = state
    debugPrint("Debug mode set to: " .. tostring(state))
end

-- Function to clear all nodes (useful for resetting the Explorer)
function ExplorerDex.clear()
    ExplorerDex.nodes = {}
    debugPrint("Cleared all Explorer nodes.")
end

-- Function to automatically add all objects in the game
function ExplorerDex.autoAddAllObjects()
    for _, object in ipairs(game:GetDescendants()) do
        ExplorerDex.addObject(object)
    end
    debugPrint("Auto-added all objects in the game.")

    -- Setup dynamic listeners
    ExplorerDex.setupChangeListeners()
end

-- Setup dynamic listeners for new objects and removals
function ExplorerDex.setupChangeListeners()
    -- Listen for new objects being added
    game.DescendantAdded:Connect(function(newObject)
        ExplorerDex.addObject(newObject)
    end)

    -- Listen for objects being removed
    game.DescendantRemoving:Connect(function(removedObject)
        ExplorerDex.removeObject(removedObject)
    end)
end

-- Initialize the Explorer Dex (entry point)
function ExplorerDex.init()
    ExplorerDex.autoAddAllObjects()
    debugPrint("Explorer Dex initialized.")
end

-- Return the module to be required
return ExplorerDex
