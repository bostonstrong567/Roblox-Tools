local ExplorerDex = {}
ExplorerDex.nodes = {} -- To store all nodes
ExplorerDex.debugMode = false -- Debug mode toggle
ExplorerDex.events = {} -- Custom event system for explorer
ExplorerDex.expanded = {} -- Track expanded nodes

-- Debugging function
local function debugPrint(message)
    if ExplorerDex.debugMode then
        print("[ExplorerDex Debug]: " .. message)
    end
end

-- Utility function: checks if the object is a valid Instance
local function isValidInstance(object)
    return object and typeof(object) == "Instance"
end

-- Custom event system
function ExplorerDex.createEvent(eventName)
    ExplorerDex.events[eventName] = ExplorerDex.events[eventName] or Instance.new("BindableEvent")
    return ExplorerDex.events[eventName]
end

function ExplorerDex.fireEvent(eventName, ...)
    if ExplorerDex.events[eventName] then
        ExplorerDex.events[eventName]:Fire(...)
    end
end

function ExplorerDex.listenEvent(eventName, callback)
    if not ExplorerDex.events[eventName] then
        ExplorerDex.createEvent(eventName)
    end
    return ExplorerDex.events[eventName].Event:Connect(callback)
end

-- Function to add an object to the Explorer (with lazy loading for children)
function ExplorerDex.addObject(objectRoot)
    if not isValidInstance(objectRoot) then return end
    if ExplorerDex.nodes[objectRoot] then return end

    -- Create a new node for the object
    local parent = objectRoot.Parent
    local newNode = {
        Obj = objectRoot,
        Parent = ExplorerDex.nodes[parent],
        Children = {}, -- Store children, load lazily
    }
    ExplorerDex.nodes[objectRoot] = newNode
    debugPrint("Added object: " .. objectRoot:GetFullName())

    -- Lazy-load children only when expanded
    newNode.Expanded = false
    newNode.OnExpand = function()
        if newNode.Expanded then return end
        newNode.Expanded = true
        local children = objectRoot:GetChildren()

        for _, child in ipairs(children) do
            ExplorerDex.addObject(child) -- Lazy load children as needed
        end
    end

    -- Fire an event when an object is added
    ExplorerDex.fireEvent("ObjectAdded", objectRoot)
end

-- Function to remove an object from the Explorer
function ExplorerDex.removeObject(objectRoot)
    if not isValidInstance(objectRoot) then return end
    if not ExplorerDex.nodes[objectRoot] then return end

    -- Remove recursively
    for _, child in ipairs(objectRoot:GetChildren()) do
        ExplorerDex.removeObject(child)
    end

    ExplorerDex.nodes[objectRoot] = nil
    debugPrint("Removed object: " .. objectRoot:GetFullName())

    -- Fire an event when an object is removed
    ExplorerDex.fireEvent("ObjectRemoved", objectRoot)
end

-- Function to move an object to a new parent
function ExplorerDex.moveObject(objectRoot, newParent)
    if not isValidInstance(objectRoot) or not isValidInstance(newParent) then return end

    ExplorerDex.addObject(objectRoot)
    ExplorerDex.addObject(newParent)

    ExplorerDex.nodes[objectRoot].Parent = ExplorerDex.nodes[newParent]
    objectRoot.Parent = newParent
    debugPrint("Moved object: " .. objectRoot:GetFullName() .. " to new parent: " .. newParent:GetFullName())

    -- Fire an event that the object moved
    ExplorerDex.fireEvent("ObjectMoved", objectRoot, newParent)
end

-- Function to toggle node expansion (show/hide children)
function ExplorerDex.toggleExpand(objectRoot)
    if not isValidInstance(objectRoot) or not ExplorerDex.nodes[objectRoot] then return end

    ExplorerDex.expanded[objectRoot] = not ExplorerDex.expanded[objectRoot]
    debugPrint("Toggled expansion for: " .. objectRoot:GetFullName())

    -- Lazy-load children when expanded
    if ExplorerDex.expanded[objectRoot] then
        ExplorerDex.nodes[objectRoot].OnExpand()
    end

    -- Fire event when toggling
    ExplorerDex.fireEvent("ObjectToggled", objectRoot, ExplorerDex.expanded[objectRoot])
end

-- Function to get all explorer nodes
function ExplorerDex.getNodes()
    return ExplorerDex.nodes
end

-- Function to enable or disable debug mode
function ExplorerDex.setDebugMode(state)
    ExplorerDex.debugMode = state
    debugPrint("Debug mode set to: " .. tostring(state))
end

-- Function to clear all nodes
function ExplorerDex.clear()
    ExplorerDex.nodes = {}
    debugPrint("Cleared all Explorer nodes.")
end

-- Function to dynamically add all game objects
function ExplorerDex.autoAddAllObjects()
    for _, object in ipairs(game:GetDescendants()) do
        ExplorerDex.addObject(object)
    end
    debugPrint("Auto-added all game objects.")
    ExplorerDex.setupListeners()
end

-- Listeners for real-time additions/removals
function ExplorerDex.setupListeners()
    game.DescendantAdded:Connect(function(newObject)
        ExplorerDex.addObject(newObject)
    end)

    game.DescendantRemoving:Connect(function(removedObject)
        ExplorerDex.removeObject(removedObject)
    end)
end

-- Initialize Explorer Dex
function ExplorerDex.init()
    ExplorerDex.autoAddAllObjects()
    debugPrint("Explorer Dex initialized.")
end

-- Return the module
return ExplorerDex
