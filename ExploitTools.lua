local Module = {}
local Player = game:GetService("Players").LocalPlayer
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

function Module.CreateNoClipToggler()
    local noClipEnabled = false
    local runServiceSteppedConnection

    return function(toggle)
        if toggle then
            if noClipEnabled then return end

            runServiceSteppedConnection = RunService.Stepped:Connect(function()
                local localPlayer = Player
                if localPlayer and localPlayer.Character and localPlayer.Character:FindFirstChild("Humanoid") then
                    pcall(function()
                        localPlayer.Character.Head.CanCollide = false
                        localPlayer.Character.Torso.CanCollide = false
                    end)
                end
            end)

            noClipEnabled = true
        else
            if runServiceSteppedConnection then
                runServiceSteppedConnection:Disconnect()
            end
            noClipEnabled = false
        end
    end
end

function Module.UltimateTween(object_to_tween, destination, options)
    local update_rate = options.updateRate or 1/30
    local enableNoClip = options.noClip or true
    local humanoid = Player.Character:WaitForChild("Humanoid")
    local walk_speed = humanoid.WalkSpeed

    Module.CreateNoClipToggler(enableNoClip)

    local function applyTween(target, end_cframe, tween_info)
        local tween_goal = {}
        tween_goal.CFrame = end_cframe
        local tween = TweenService:Create(target, tween_info, tween_goal)
        tween:Play()
    end

    local function getBasePart(object)
        return object.PrimaryPart or object:FindFirstChildWhichIsA("BasePart")
    end

    local function updateTween()
        local time, easing_style, easing_direction = 5, Enum.EasingStyle.Linear, Enum.EasingDirection.In
        local tween_speed = options.speed or "Default"

        if tween_speed == "Slow" then
            time = 10
        elseif tween_speed == "Fast" then
            time = 1
        elseif tween_speed == "AntiCheat" then
            local basePart = object_to_tween:IsA("Model") and getBasePart(object_to_tween) or object_to_tween
            local distance_to_destination = (destination.Position - basePart.Position).Magnitude
            time = distance_to_destination / walk_speed
        end

        local tween_info = TweenInfo.new(time, easing_style, easing_direction)

        if object_to_tween:IsA("Model") then
            local target_part = getBasePart(object_to_tween)
            if target_part then
                applyTween(target_part, CFrame.new(destination.Position), tween_info)
            end
        else -- It's a Part
            applyTween(object_to_tween, CFrame.new(destination.Position), tween_info)
        end
    end

    -- Run the update function at the specified rate
    while wait(update_rate) do
        updateTween()
    end

    ToggleNoClip(false) -- Disabling NoClip after tweening
end

return Module
